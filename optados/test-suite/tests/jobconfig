#--------------------------------------------------------------
# O p t a D O S   D O S   T e s t s 
#--------------------------------------------------------------
#
# Test coverage
#           +-------+----------+--------+
#           | fixed | adaptive | linear |
# ----------+-------+----------+--------+
# odo file  |   1   |    2     |    3   |
# dat file  |       |    4,5   |    6   |
# spin      |   1   |    2,4   |    3   |
# no spin   |       |    5     |        |
# ome file  |   1   |    2,4,5 |    3   |
# dome file |       |          |    6   |
# ----------+-------+----------+--------+

# 1)
# Initial JRY example test
# It does fixed broadening so only requires a band file 
[testopt_dos_fixed]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 2)
# Test the adaptive smearing for a DOS
# Note this is the prototype test for any test that requires
# Unzipping and converting formatted files.
[testopt_dos_adaptive]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 3)
# Test the linear smearing for a DOS
[testopt_dos_linear]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 4)
# Test the adaptive  smearing dat file for a DOS
[testopt_dos_adaptive_dat]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.adaptive.dat

# 5)
# Test the adaptive smearing dat file for a DOS
# in the case where the underlying states are not spin dependent
[testopt_dos_adaptive_no_spin]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.adaptive.dat

# 6)
# Test the linear smearing dat file for a DOS from a dome file
[testopt_dos_linear_dome]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.linear.dat

#--------------------------------------------------------------
# O p t a D O S   P D O S   T e s t s
#--------------------------------------------------------------


#--------------------------------------------------------------
# O D 2 O D   T e s t s
#--------------------------------------------------------------

# Test that od2od produces an output. In this case we look for whether it has
# correctly read the number of bands from a Si2.band file
[testod2od_dummy]
program = OD2OD_LOG_OK
inputs_args = ('', '-i dummy -o dummy Si2')
output = Si2.log

# It is non-trivial to test the tester. Here we take the ome_fmt file convert
# it to a ome_bin (using the makefile) then convert it back to an ome_fmt with 
# the testcode.
# I am aware that this does NOT test that the .ome_bin is correct. Only that
# od2od manages to perform AA^-1=I.  Better ideas welcome!  
[testod2od_ome_fmt]
program = OD2OD_FMT_OK
inputs_args = ('', '-i ome_bin -o ome_fmt -w Si2_out Si2')
output = Si2_out.ome_fmt

#--------------------------------------------------------------
# C a t e g o r y   L i s t 
#--------------------------------------------------------------
[categories]
optados_only = testopt_*
od2od_only = testod2od_*
all = optados_only od2od_only
default =  all
